/* === === === ベースグループ === === === */
body {
	color: #222;
	font-family: sans-serif;
	line-height: 1.5;
}

a {
	color: #0069ff;
}

img {
	/* max-width: 100px; */
	vertical-align: top;
}

/* === === === レイアウトグループ === === === */

.ly_header {
	padding-top: 20px;
	border-bottom: 1px solid #ddd;
}

/**
 * ■ box-sizing
 * box-sizing: content-box: 初期値。パディングとボーダーを幅と高さに含めない
 * box-sizing: border-box: パディングとボーダーを幅と高さに含める。
 */
.ly_header_inner {
	max-width: 1230px; /* css-wipe で box-sizing: border-box;が適用されているので、paddingを引いたwidthは1200px */
	padding-right: 15px;
	padding-left: 15px;
	margin-right: auto; /* width が決まっている場合、mergin-right, margin-left を auto にすると margin を等割して中央揃えにしてくれる */
	margin-left: auto;
}

.ly_footer {
	padding-top: 20px;
	padding-bottom: 20px;
	background-color: #222;
}

.ly_footer_inner {
	max-width: 1230px;
	padding-right: 15px;
	padding-left: 15px;
	margin-right: auto;
	margin-left: auto;
}

.ly_cont {
	max-width: 1230px;
	padding: 60px 15px;
	margin-right: auto;
	margin-left: auto;
}

/**
 * ■ justify-content: https://developer.mozilla.org/ja/docs/Web/CSS/justify-content
 * フレックスコンテナ内のアイテムの水平方向の揃え
 * flex-start: 初期値。左揃え
 * flex-end: 右揃え
 * center: 中央揃え
 * space-between: アイテム同士の間隔が均等になるように揃える
 * space-around: アイテムの周りのスペースが均等になるように揃える
 *
 */
.ly_cont.ly_cont__col {
	display: flex;
	justify-content: space-between; /* 各アイテムを均等に配置し、 最初のアイテムは先頭に寄せ、 最後のアイテムは末尾に寄せる */
}

/**
 * ■flex : https://developer.mozilla.org/ja/docs/Web/CSS/flex
 * flex-grow, flex-shrink, flex-basisをまとめて指定する
 * flex-grow: 子要素の伸びる比率。指定する数字が大きくなるとその分だけ伸長するようになる。0は伸長しない。(default=0)
 * flex-shrink: 子要素の縮む比率。指定する数字が大きくなるとその分だけ縮むようになる。0は縮まない。(default=1)
 * flex-basis: フレックスアイテムの初期の寸法を設定する。
 */
.ly_cont_main {
	flex: 1; /* 画面サイズに合わせて要素が伸長する */
	margin-right: 3.25203%;
}

.ly_cont_side {
	flex: 0 0 260px; /* 画面サイズによらず要素幅は 260px */
}

@media screen and (max-width: 768px) {
	/**
	 * ■ flex-direction: https://developer.mozilla.org/ja/docs/Web/CSS/flex-direction
	 * 子要素の並ぶ向きを指定する
	 * row: 左から右に並ぶ
	 * row-reverse: 右から左に並ぶ
	 * column: 上から下に並ぶ
	 * column-reverse: 下から上に並ぶ
	 */
	.ly_cont.ly_cont__col {
		flex-direction: column; /* 上から下に並ぶ */
	}
	.ly_cont_main {
		margin-right: 0;
		margin-bottom: 60px;
	}
}

/* === === === モジュールグループ(エレメントモジュール) === === === */

/* --- --- --- ボタン --- --- --- */
/**
 * ■ display : http://www.htmq.com/style/display.shtml , https://saruwakakun.com/html-css/basic/display#section4
 * ブロックレベル、インライン、テーブル、ルビ、フレックスコンテナなどの、要素の表示形式を指定する
 * inline: 初期値。インラインボックスを生成する。
 * block: ブロックボックスを生成する。
 * inline-block: インラインレベルのブロックコンテナを生成する。要素の並びはinline的(横並び)で、要素の中身はblock的な性質を持つ。
 * flex: ブロックレベルのフレックスコンテナを生成する。 https://developer.mozilla.org/ja/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox
 * 要素の表示種別を指定する
 *
 * ■ border : https://developer.mozilla.org/ja/docs/Web/CSS/border
 * border-width, border-style, border-color を一括設定する
 *
 * ■ box-shadow : https://developer.mozilla.org/ja/docs/Web/CSS/box-shadow
 * 要素のフレームの周囲にシャドウ効果を追加する
 * offset-x, offset-y, blur-radius, color
 *
 * ■ text-decoration : https://developer.mozilla.org/ja/docs/Web/CSS/text-decoration
 * テキストの装飾的な線の表示を一括設定するプロパティ
 * text-decoration-line: 使用する装飾の種類を指定(underlineやline-through)
 * text-decoration-color: 装飾の色
 * text-decoration-style: 装飾の種類(solid(実線), wavy(波線), dashed(取り消し線))
 * text-decoration-thickness: 装飾に使われる線の太さ
 *
 * ■ transition : https://developer.mozilla.org/ja/docs/Web/CSS/transition
 * :hoverなどの擬似クラスによる状態遷移の一括設定プロパティ
 * transition-property: トランジションを適用するcssプロパティの名前: https://developer.mozilla.org/ja/docs/Web/CSS/transition-property
 * transition-duration: トランジションにかかる所要時間(default=0s): https://developer.mozilla.org/ja/docs/Web/CSS/transition-duration
 * transition-timing-function: トランジション実行時の中間状態の遷移を指定する関数(default=ease): https://developer.mozilla.org/ja/docs/Web/CSS/transition-timing-function
 * transition-delay: トランジションが実行されるまでの待ち時間(defualt=0s): https://developer.mozilla.org/ja/docs/Web/CSS/transition-delay
 *
 * ■ background-color
 * padding, border 領域まで background。 margin は background 領域ではない。
 */
.el_btn {
	display: inline-block; /* 要素の並びはinline的(横並び)で、要素の中身はblock的な性質を持つ。(親要素のtext-alignを継承してくれるため位置調整のcssが要らなくなる) */
	width: 300px; /* 長いテキストが入る場合に改行されるように、横幅を指定する */
	max-width: 100%; /* スクリーンサイズが小さくなったときにボタンが見切れないように、横幅を親ボックスの最大値に合わせる */
	padding: 20px 10px; /* heightプロパティで指定すると長いテキストが来たときにボタンから溢れてしまう */
	background-color: #e25c00;
	border: 2px solid transparent; /* ホバーのときにボタンのサイズが変わらないように最初からボーダーを設定しておく。transparent = 透明 */
	box-shadow: 0 3px 6px rgba(0,0,0,.16); /* rgba(0,0,0,.16) は 16% の透明度の黒 */
	color: #fff;
	font-size: 1.125rem; /* ルート要素の font-size を基準にしたサイズ。root 要素の font-size は 16px なので 1.125rem は 18px。ブラウザのフォントサイズ設定が反映される。 */
	text-align: center;
	text-decoration: none; /* テキストの装飾を行わない */
	transition: all .25s; /* プロパティ名, 所要時間 */
}

/**
 * 擬似クラス
 * forcus: tabで要素にフォーカスしたとき
 * hover: カーソルを要素の上に置いたとき
 */
.el_btn:focus,
.el_btn:hover {
	background-color: #fff;
	border-color: currentColor; /* colorプロパティに設定されている値を利用する */
	color: #e25c00;
}

/**
 * ■ position
 * 要素の基準位置が相対か絶対かを指定する際に使用する。表示位置はtop, right, bottom, leftなどで指定する。: http://www.htmq.com/style/position.shtml
 * static: 初期値。top, right, bottom, left, z-index プロパティは効果がない
 * relative: 相対位置で要素の配置を指定する。
 *           staticを指定した場合に表示される位置が基準位置となる。
 *           top, right, bottom, left で相対位置を指定
 * absolute: 絶対位置で要素の配置を指定する。 要素のための空間が作成されない。
 *           親要素が position: static 以外なら、親要素の左上が基準位置として top, right, bottom, left で位置を指定
 *           親要素が position: static なら、ウィンドウ全体の左上が基準位置として top, right, bottom, left で位置を指定
 * fixed:  絶対位置で要素の配置を指定する。要素のための空間が作成されない。スクロールしても位置が固定されたままとなる。
 *         ビューポートの左上を基準位置として、top, right, bottom, left で位置を指定
 */
.el_btn.el_btn__arrowRight {
	position: relative; /* after疑似要素で実装するアイコンにposition: absolute;を使用するため relativeを設定する */
	padding-right: 2em; /* アイコンを設置する分、右側の余白を多めに設定する */
	padding-left: 1.38em;
}

/**
 * ■ 疑似要素: https://developer.mozilla.org/ja/docs/Web/CSS/Pseudo-elements
 * セレクタに負荷するキーワードで、選択された要素の特定の部分にスタイル付できるようにするもの
 * ::after : 選択した要素の最後の子要素として疑似要素を作成する。contentプロパティで作成した要素に内容を挿入できる。
 *
 * ■ transform
 * 要素を回転、拡大縮小、傾斜、移動させることができる
 *
 * ■ 左右天地中央揃え(position: absolute; 適用時)
 * top: 50%; left: 50%; transform: translate(-50%, -50%);
 */
.el_btn.el_btn__arrowRight::after {
	content: '\f061';
	position: absolute; /* position: absolete, top: 50%, transform: translateY(-50%) は天地中央揃えの常套手段 */
	top: 50%;
	transform: translateY(-50%); /* 要素サイズの50%上に寄せる */
	right: .83em;
	font-family: 'Font Awesome 5 Free'; /* https://fontawesome.com/ で取得できる */
	font-weight: 900; /* Font Awesome の Solid スタイルを表示させるための指定。Font Awsome 5 からスタイルを font-weight でしていできるようになった */
}

.el_btn.el_btn__large {
	width: 340px;
	padding-top: 25px; /* 高さを増すためには .el_btn のスタイルと同様に height ではなく padding を使用する */
	padding-bottom: 25px;
	font-size: 1.375rem;
}


.el_btn.el_btn__yellow {
	background-color: #f1de00;
	color: #222;
}

.el_btn.el_btn__yellow:focus,
.el_btn.el_btn__yellow:hover {
	background-color: #fff;
	border-color:  #f1de00;
}

.el_roundedBtn {
	display: inline-block;
	width: 236px;
	max-width: 100%;
	padding: 15px 10px;
	background-color: #e25c00;
	border: 2px solid transparent;
	border-bottom-color: #d40152;
	border-radius: 10px;
	color: #fff;
	font-size: 1.125rem;
	text-align: center;
	text-decoration: none;
	transition: .25s;
}

.el_roundedBtn:focus,
.el_roundedBtn:hover {
	background-color: #fff;
	border-color: currentColor;
	color: #e25c00;
}

/* --- --- --- アイコン付き小ボタン --- --- --- */

.el_beforeIconBtn {
	/* 使用されるコンテキストのフォントサイズに合わせたいため、フォントサイズは設定しない */
	position: relative;
	display: inline-block;
	padding: .2em .3em; /* フォントサイズが可変のモジュールの余白はフォントサイズに由来する相対値で設定するのが定石 */
	border: 1px solid currentColor;
	color: #e25c00;
	text-decoration: none;
	transition: .25s;
}

.el_beforeIconBtn:focus,
.el_beforeIconBtn:hover {
	background-color: #e25c00;
	color: #fff;
}

.el_beforeIconBtn::before {
	margin-right: .5em;
	font-family: 'Font Awesome 5 Free';
	font-weight: 900;
}

.el_beforeIconBtn.el_beforeIconBtn__download::before {
	content: '\f019';
}

.el_beforeIconBtn.el_beforeIconBtn__zoom::before {
	content: '\f00e';
	transform: translateY(-6%); /* アイコンが若干下よりに見えてしまうので上に寄せる */
}

/* --- --- --- アイコン --- --- --- */

/* span タグの ::before 疑似要素としてアイコンを生成しないと、 IE で アイコンにも a タグの下線が入ってしまう */
.el_beforeIcon::before {
	display: inline-block;
	margin-right: .3em; /* フォントサイズが変わってもアイコンとテキストの間を適切に開けるためのスタイリング */
	color: #e25c00;
	font-family: 'Font Awesome 5 Free';
	font-weight: 400; /* Font Awesome のアイコンを表示させるための指定 */
}

.el_beforeIcon.el_beforeIcon__pdf::before {
	content: '\f1c1';
}

.el_beforeIcon.el_beforeIcon__excel::before {
	content: '\f1c3';
}

.el_beforeIcon.el_beforeIcon__PP::before {
	content: '\f1c4';
}

.el_beforeIcon.el_beforeIcon__checkSquare::before {
	content: '\f14a';
}

.el_beforeIcon.el_beforeIcon__chevLeft::before { /* 三角形の1辺gないような図形歯 chevron と呼ぶ */
	content: '';
	width: .375em;
	height: .375em;
	border-bottom: .125em solid #e25c00; /* 矢印のベースとなる図形を border-bottom, border-left で描画 */
	border-left: .125em solid #e25c00;
	transform: rotate(45deg) translateY(-30%); /* 45度時計回りに回転させて、30%上に移動する */
}

.el_afterIcon::after {
	display: inline-block;
	margin-left: .3em;
	color: #e25c00;
	font-family: 'Font Awesome 5 Free';
	font-weight: 900;
}

.el_afterIcon.el_afterIcon__chevRight::after {
	content: '';
	width: .375em;
	height: .375em;
	border-top: .125em solid #e25c00;
	border-right: .125em solid #e25c00;
	transform: rotate(45deg) translateY(-15%);
}

/* --- --- --- ラベル --- --- --- */

.el_label {
	display: inline-block;
	padding: .2em .3em; /* ボタンと同様に高さや横幅の確保は height, width ではなく padding で行う */
	background-color: #e25c00;
	color: #fff;
	font-size: .75rem;
	font-weight: bold;
	border: 2px solid transparent;
}

.el_label.el_label__yellow {
	background-color: #f1de00;
	color: #000;
}

a.el_label { /* a タグに el_label が適用されたときのみ 動きをつける */
	text-decoration: none;
	transition: .25s;
}

a.el_label:focus,
a.el_label:hover {
	background-color: #fff;
	border-color: currentColor;
	color: #e25c00;
}

/**
 * ■ border-radius : http://www.htmq.com/css3/border-radius.shtml
 * ボックスの4つのコーナーの角丸をまとめて指定できる
 * border-radius: 100px 25px 50px 50px / 50px 25px 50px 25px
 *                水平方向(左上, 右上, 右下, 左下) / 垂直方向(左上, 右上, 右下, 左下)
 */
.el_roundedLabel {
	display: inline-block;
	padding: .3em .9em; /* 楕円にしたとき詰まって見えてしまわないように少し広く余白を取る */
	background-color: #e25c00;
	border-radius: 1em; /* 単位に em を使用すると、上下を潰さない形で楕円を実現することができる */
	color: #fff;
	font-size: .75rem;
	font-weight: bold;
}

.el_lv1Heading {
	padding: 30px 10px;
	background-color: #e25c00;
	color: #fff;
	font-size: 1.75rem;
	text-align: center;
}

.el_lv1Heading > span {
	position: relative;
	display: inline-block;
	transform: translateY(-20%); /* 下線があるのでテキストを微妙に上にずらす */
}

.el_lv1Heading > span::after { /* 下線部分は ::after 疑似要素 で作成する */
	content: '';
	position: absolute;
	bottom: -10px;
	left: 50%; /* left: 50%, transform: translateX(-50%) は左右中央揃えの定石 */
	width: 80px;
	height: 1px;
	background-color: currentColor;
	transform: translateX(-50%);
}

.el_lv2Heading {
	padding-bottom: 10px;
	border-bottom: 4px solid #e25c00;
	font-size: 1.75rem;
	font-weight: bold;
	/* レイアウトのスタイリングを含めるべきではないが、「必ず100px空ける」みたいにルールが統一されているならあり (ハーフリーディングは考慮しない)
	 * margin-top: 100px;
	 * margin-bottom: 20px;
	 */
}

.el_lv3Heading {
	padding-bottom: 6px;
	border-bottom: 2px solid #e25c00;
	font-size: 1.5rem;
	font-weight: bold;
}

.el_lv4Heading {
	padding-left: 6px;
	border-left: 2px solid #e25c00;
	font-size: 1.25rem;
	font-weight: bold;
}

.el_lv5Heading {
	color: #e25c00;
	font-size: 1.125rem;
	font-weight: bold;
}

.el_lv6Heading {
	font-size: 1.125rem;
}

.el_caution { /* hp_red だと、後で太字にしたくなったりしたときに整合性が取れなくなるので、クラス名には意味のある単語をつけるのがよい */
	color: #d40152;
}

.el_note {
	font-size: .75rem;
}

/* === === === モジュールグループ(ブロックモジュール) === === === */

/* --- --- --- メディア --- --- --- */

/**
 * ■ align-items: https://developer.mozilla.org/ja/docs/Web/CSS/align-items
 * フレックスコンテナ内のアイテムの垂直方向の揃えを指定
 * stretch: 初期値。縦方向に伸ばせるだけ伸ばす。
 * flex-start: 上に寄せる
 * flex-end: 下に寄せる
 * center: 中央に寄せる
 */
.bl_media {
	display: flex; /* 画像とテキストを横並びにして天地中央揃えにしたい場合は display: flex; align-items: center */
	align-items: center; /* 上付きにしたい倍は flex-start, 下付きにしたい場合は flex-end */
}

.bl_media_imgWrapper {
	flex: 0 1 27.58333%; /* flex-grow: 0;  flex-shrink: 1; flex-basis: 27.58333%
	                      * スクリーンサイズを縮小したときに画像、テキスト両方を自然に縮小させるための指定 */
	margin-right: 3.33333%; /* 画像の右のマージン40px(css-wipeのデフォルト?)を メイン幅の1200pxで割ったもの。
	                         * %で指定すると、スクリーンを縮小したときに画像と記事の間の余白も小さくなる */
}

.bl_media_imgWrapper > img {
	width: 100%;
}

.bl_media_body {
	flex: 1; /* bl_media_imgWrapper の空白分だけ要素が伸長するようにする。flex-grow: 1 : アイテムが伸長する */
}

/**
 * ■ :last-child: https://developer.mozilla.org/ja/docs/Web/CSS/:last-child
 * 兄弟要素のグループの中で最後の要素を表す
 */
.bl_media_body > *:last-child { /* 最後の要素の余白をリセット */
	margin-bottom: 0; /* 最後の子要素の余白を詰めると、要素が一個になっても、天地中央揃えになる */
}

.bl_media_ttl {
	margin-bottom: 10px;
	font-size: 1.125rem;
	font-weight: bold;
}

@media screen and (max-width: 768px) {
	.bl_media {
		display: block; /* メディアクエリ適用時は画像が上、テキストが下の縦並びレイアウトになってほしい */
	}

	.bl_media_imgWrapper {
		margin-right: 0;
		margin-bottom: 20px;
	}
}

/* --- --- --- メディア(反転) --- --- --- */

.bl_media.bl_media__rev {
	flex-direction: row-reverse; /* 横並びレイアウト。右から左 */
}

.bl_media__rev .bl_media_imgWrapper {
	margin-right: 0; /* 余白のとり方は、 margin-right で統一したいため、画像のmargin-rightを0にして、テキストのmargin-rightをせっていする */
}

.bl_media__rev .bl_media_body {
	margin-right: 3.33333%; /* 余白のとり方は、 margin-right で統一したいため、画像のmargin-rightを0にして、テキストのmargin-rightをせっていする */
	text-align: right;
}

@media screen and (max-width: 768px) {
	.bl_media__rev .bl_media_body {
		margin-right: 0; /* 要素が縦並びになったときに、テキストの不要なmargin-rightを取り除く */
	}
}

/* --- --- --- メディア(画像半分) --- --- --- */

.bl_halfMedia {
	display: flex;
	align-items: center;
}

.bl_halfMedia_imgWrapper {
	flex: 0 1 48.33333%; /* 余白分を計算して flex-basisを50%にしない */
	margin-right: 3.33333%;
}

.bl_halfMedia_imgWrapper > img {
	width: 100%;
}

.bl_halfMedia_body {
	flex: 1;
}

.bl_halfMedia_body > *:last-child {
	margin-bottom: 0;
}

.bl_halfMedia_ttl {
	margin-bottom: 10px;
	font-size: 1.125rem;
	font-weight: bold;
}

@media screen and (max-width: 768px) {
	.bl_halfMedia {
		display: block;
	}

	.bl_halfMedia_imgWrapper {
		margin-right: 0;
		margin-bottom: 20px;
	}
}

/* --- --- --- カード --- --- --- */

.bl_card {
	box-shadow: 0 3px 6px rgba(0,0,0,.16);
}

.bl_card_imgWrapper {
	position: relative;
	padding-top: 56.25%; /* 子要素の画像の表示領域としての高さを確保するため。画像はposition: absoluteなのでheightだと高さを確保できない */
	overflow: hidden; /* はみ出た画像はトリミング */
}

.bl_card_imgWrapper > img { /* 親要素のpadding-top 領域に画像を天地中央で表示させるための指定 */
	position: absolute;
	top: 50%;
	width: 100%; /* 親要素の横幅いっぱいまで広がる */
	transform: translateY(-50%);
}

.bl_card_body {
	padding: 15px;
}

.bl_card_body > *:last-child {
	margin-bottom: 0;
}

.bl_card_ttl {
	margin-bottom: 5px;
	font-size: 1.125rem;
	font-weight: bold;
}

.bl_card_txt {
	color: #777;
}

/* --- --- --- カード(バッジ付き) --- --- --- */
.bl_card_badge {
	position: relative;
}

.bl_card_badge::after { /* ::after疑似要素で三角形を描画 */
	content: ''; /* 高さも幅もない、点のような要素を作る */
	position: absolute;
	z-index: 1;
	top: 0;
	left: 0;
	width: 0;
	height: 0;
	border-width: 3.75rem 3.75rem 0 0; /* 三角形を作るジェネレータが存在する: http://apps.eky.hk/css-triangle-generator/ */
	border-style: solid;
	border-color: #e25c00 transparent transparent transparent;
}

.bl_card_badge_txt {
	position: absolute;
	z-index: 2;
	top: .5rem;
	left: .3125rem;
	color: #fff;
	font-size: .875rem;
	font-weight: bold;
	transform: rotate(-45deg); /* バッジに合わせてテキストを回転 */
}

/* --- --- --- カード(リンク) --- --- --- */
a.bl_card {
	display: block;
	color: currentColor;
	text-decoration: none;
	transition: .25s;
}

a.bl_card .bl_card_ttl,
a.bl_card .bl_card_txt {
	transition: .25s;
}

/**
 * ■ opacity
 * 要素の透明度を指定する
 */
a.bl_card:focus,
a.bl_card:hover {
	opacity: .75;
}

a.bl_card:focus .bl_card_ttl,
a.bl_card:focus .bl_card_txt,
a.bl_card:hover .bl_card_ttl,
a.bl_card:hover .bl_card_txt {
	color: #e25c00;
	text-decoration: underline;
}

/* --- --- --- カードのカラム --- --- --- */
/**
 * ■ flex-wrap: https://developer.mozilla.org/ja/docs/Web/CSS/flex-wrap
 * 要素の折返しを指定
 * nowrap: 初期値。折り返さない
 * wrap: 折り返す(上から下に並べる)
 * wrap-reverse: 折り返す(下から上に並べる)
 */
.bl_cardUnit { /* モジュール自体にレイアウトの指定はしないで、レイアウト用のラッパーモジュールを作る */
	display: flex;
	flex-wrap: wrap;
}

.bl_cardUnit.bl_cardUnit__col3 {
	margin-bottom: -30px; /* 最終行の.bl_cardのmargin-bottomを相殺するためのコード */
}

.bl_cardUnit.bl_cardUnit__col4 {
	margin-bottom: -20px;
}

.bl_cardUnit__col3 > .bl_card {
	width: 31.707%;
	margin-right: 2.43902%;
	margin-bottom: 30px;
}

.bl_cardUnit__col4 > .bl_card {
	width: 23.78%;
	margin-right: 1.62602%;
	margin-bottom: 20px;
}

/**
 * ■ :nth-child() : https://developer.mozilla.org/ja/docs/Web/CSS/:nth-child
 * 兄弟要素のグループの中から位置に基づいて、要素を選択する擬似クラス
 */
.bl_cardUnit__col3 > .bl_card:nth-child(3n) { /* .bl_card要素の中で3つおきに選択 */
	margin-right: 0; /* 3つめの要素のmargin-rightをなくす */
}

.bl_cardUnit__col4 > .bl_card:nth-child(4n) {
	margin-right: 0;
}

@media screen and (max-width: 768px) {
	.bl_cardUnit.bl_cardUnit__col3 {
		margin-bottom: -20px;
	}
	.bl_cardUnit > .bl_card { /* 3カラムだろうと4カラムだろうとメディアクエリ適用時は必ず1カラムにするため、モディファイヤをセレクタに含めない */
		width: 100%;
		margin-bottom: 20px;
		margin-right: 0;
	}
}

/* --- --- --- 水平テーブル --- --- --- */

.bl_horizTable {
	border: 1px solid #ddd;
}

.bl_horizTable table {
	width: 100%;
}

/**
 * ■ vertical-align : https://developer.mozilla.org/ja/docs/Web/CSS/vertical-align
 * インラインボックス、表セルボックスの垂直方向の配置を指定する。
 */
.bl_horizTable th {
	width: 20%;
	padding: 15px;
	background-color: #efefef;
	border-bottom: 1px solid #ddd;
	font-weight: bold;
	vertical-align: middle;
}

.bl_horizTable td {
	padding: 15px;
	border-bottom: 1px solid #ddd;
}

.bl_horizTable tr:last-child th,
.bl_horizTable tr:last-child td {
	border-bottom-width: 0; /* .bl_horizTable の border とかぶらないように */
}

/* --- --- --- 水平テーブル(メディアクエリ時にスクロール) --- --- --- */

/**
 * ■ overflow-x: http://www.htmq.com/css/overflow-x.shtml
 * ボックスの範囲に内容が収まらない場合にはみ出た左右の表示方法を指定する。
 */
@media screen and (max-width: 768px) {
	.bl_horizTable.bl_horizTable__mdScroll {
		border-right-width: 0; /* 右側の border を消してスクロールできることを示す */
		overflow-x: auto; /* ボックスに収まらない場合に同表示するかはユーザーエージェントに依存。スクロールバーなどが表示される */
	}
	/**
	 * ■ white-space: https://developer.mozilla.org/ja/docs/Web/CSS/white-space
	 * タブ、スペース、改行などの表示を指定する
	 */
	.bl_horizTable.bl_horizTable__mdScroll th,
	.bl_horizTable.bl_horizTable__mdScroll td {
		white-space: nowrap; /* 連続するホワイトスペースをまとめるが行の折り返しは行わない */
	}
	.bl_horizTable.bl_horizTable__mdScroll td {
		border-right: 1px solid #ddd;
	}
}

/* --- --- --- テーブル(垂直) --- --- --- */

.bl_vertTable {
	border: 1px solid #ddd;
}

/**
 * ■ text-align: http://www.htmq.com/style/text-align.shtml
 * ブロックコンテナ内の行の揃え位置・均等割り付けを指定する。
 *
 * ■ table-layout: https://developer.mozilla.org/ja/docs/Web/CSS/table-layout
 * <table> のセル、行、列のレイアウトに使用されるアルゴリズムを設定する。
 * auto: 既定値。表とセルの幅は中身に合うように調整される。
 * fixed: 表と列の幅は table 要素 と col 要素の幅によって、または最初の行のセル幅によって設定される。後続するb業のセルは列幅の設定に影響しない。
 */
.bl_vertTable table {
	width: 100%;
	text-align: center; /* インラインレベルのコンテンツは、ラインボックスの中央に配置される */
	table-layout: fixed;
}

.bl_vertTable thead tr {
	background-color: #efefef;
}

.bl_vertTable th {
	padding: 15px;
	border-right: 1px solid #ddd;
	border-bottom: 1px solid #ddd;
	font-weight: bold;
	vertical-align: middle;
}

.bl_vertTable td {
	padding: 15px;
	border-right: 1px solid #ddd;
	border-bottom: 1px solid #ddd;
	vertical-align: middle;
}

.bl_vertTable th:last-child,
.bl_vertTable td:last-child {
	border-right-width: 0; /* 最終列の border-right が .bl_vertTable の border 指定とかぶらないようにする */
}

.bl_vertTable tbody tr:last-child td {
	border-bottom-width: 0; /* 最終行の border-bottom が .bl_vertTable の border 指定とかぶらないようにする */
}

@media screen and (max-width: 768px) {
	.bl_vertTable {
		border-right-width: 0;
		overflow-x: auto;
	}
	.bl_vertTable table {
		width: auto;
		min-width: 100%;
	}
	.bl_vertTable th,
	.bl_vertTable td {
		white-space: nowrap;
	}
	.bl_vertTable th:last-child,
	.bl_vertTable td:last-child {
		border-right-width: 1px;
	}
}

/* --- --- --- 交差テーブル --- --- --- */
.bl_crossTable {
	border: 1px solid #ddd;
}

.bl_crossTable table {
	width: 100%;
	text-align: center;
	table-layout: fixed;
}

.bl_crossTable th {
	padding: 15px;
	background-color: #efefef;
	border-right: 1px solid #ddd;
	border-bottom: 1px solid #ddd;
	font-weight: bold;
	vertical-align: middle;
}

.bl_crossTable td {
	padding: 15px;
	border-right: 1px solid #ddd;
	border-bottom: 1px solid #ddd;
	vertical-align: middle;
}

.bl_crossTable th:last-child,
.bl_crossTable th:last-child {
	border-right-width: 0;
}

.bl_crossTable tbody tr:last-child th,
.bl_crossTable tbody tr:last-child td {
	border-bottom-width: 0;
}

@media screen and (max-width: 768px) {
	.bl_crossTable {
		border-right-width: 0;
		overflow-x: auto;
	}
	.bl_crossTable table {
		width: auto;
		min-width: 100%;
	}
	.bl_crossTable th,
	.bl_crossTable td {
		white-space: nowrap;
	}
	.bl_crossTable th:last-child,
	.bl_crossTable td:last-child {
		border-right-width: 1px;
	}
	.bl_crossTable_mdSticky { /* メディアクエリ時に固定したい見出しに対するクラス指定 */
		position: -webkit-sticky; /* 特定の位置に固定して表示する */
		position: sticky; /* 特定の位置に固定して表示する */
		left: 0; /* 左側の0のいちに配置 */
	}
}

/* --- --- --- ページャー --- --- --- */
.bl_pager {
	display: flex; /* 左右中央揃え */
	overflow-x: auto; /* ページャーがコンテンツ幅を超えた場合に水平スクロールにする */
}
.bl_pager_inner {
	display: flex; /* ページャー項目を横並びにする */
	margin-right: auto; /* 左右中央揃え */
	margin-left: auto; /* 左右中央揃え */
}
.bl_pager_inner > *:last-child {
	margin-right: 0;
}
.bl_pager_inner > li {
	margin-right: 15px; /* ページャーのクリッカブルな範囲は少し狭いため、どのようなスクリーンサイズでも、一律15px空いてたほうがユーザビリティが高い */
}
.bl_pager_link {
	display: flex; /* display: flex; align-items: center; justify-content: center は 子要素を左右天地中央揃えで配置する */
	align-items: center;
	justify-content: center;
	width: 40px;
	height: 40px;
	border: 1px solid currentColor;
	color: #e25c00;
	text-decoration: none;
	transition: .25s;
}
.bl_pager_link:focus,
.bl_pager_link:hover {
	background-color: #e25c00;
	color: #fff;
	opacity: .75;
}
.bl_pager_link.is_active {
	background-color: #e25c00;
	color: #fff;
	pointer-events: none; /* hover, click, focus などのイベントの対象外にする */
}

/* --- --- --- タブナビゲーション --- --- --- */
.bl_tabNav_inner {
	display: flex; /* display: flex; align-items: center; justify-content: center は 子要素を左右天地中央揃えで配置する */
	align-items:center;
	justify-content: center;
	flex-wrap: wrap; /* 子要素がコンテンツ幅をはみ出したときに折り返す */
	margin-bottom: -10px; /* .bl_tabNav_link の margin-bottom を打ち消す */
}
.bl_tabNav_link {
	display: inline-block;
	padding-right: 30px;
	padding-bottom: 10px;
	padding-left: 30px;
	margin-bottom: 10px; /* ナビゲーションが折り返した際に、1行目と2行目の間がつまりすぎないようにする */
	border-bottom: 4px solid #efefef;
	text-decoration: none;
	transition: .25s;
}
.bl_tabNav_link:focus,
.bl_tabNav_link:hover {
	border-bottom-color: currentColor;
	color: #e25c00;
	opacity: .75;
}
.bl_tabNav_link.is_active {
	border-bottom-color: currentColor;
	color: #e25c00;
	pointer-events: none;
}
@media screen and (max-width: 768px) {
	.bl_tabNav {
		overflow-x: auto;
	}

	.bl_tabNav_inner {
		flex-wrap: nowrap; /* ナビゲーションがコンテンツ幅をはみ出したときに折り返さない */
		justify-content: flex-start; /* アイテムを左寄せにする。これがないと左側の項目をクリックできなくなる */
		margin-bottom: 0;
		white-space: nowrap;
	}
}

/* --- --- --- CTA --- --- --- */
.bl_cta {
	padding: 30px;
	background-color: rgba(221, 116, 44, .05); /* 透明度 5% のオレンジ */
	border: 1px solid #e25c00;
	text-align: center;
}

.bl_cta > *:last-child {
	margin-bottom: 0;
}

.bl_cta_ttl {
	padding-bottom: 10px;
	margin-top: -6px;
	margin-bottom: 40px;
	border-bottom: 1px solid currentColor;
	color: #e25c00;
	font-size: 1.5rem;
	font-weight: bold;
}

/* --- --- --- 料金表 --- --- --- */
.bl_priceUnit { /* レイアウト用のラッパーモジュール */
	display: flex;
	align-items: flex-start;
	justify-content: center;
}

.bl_priceUnit .bl_price {
	flex: 1; /* flex-grow: 1; 各要素を均等幅で表示するための指定。*/
	margin-right: 2.43902%;
}

.bl_priceUnit .bl_price:last-child {
	margin-right: 0;
}

@media screen and (max-width: 768px) {
	.bl_priceUnit {
		display: block;
	}
	.bl_priceUnit .bl_price {
		margin-right: 0;
		margin-bottom: 30px;
	}
	.bl_priceUnit .bl_price:last-child {
		margin-bottom: 0;
	}
}

.bl_price {
	border: 1px solid #ddd;
}

.bl_price_header {
	padding: 10px;
	background-color: #e25c00;
	color: #fff;
	text-align: center;
}
.bl_price_ttl {
	font-size: 1.125rem;
}
.bl_price_price {
	font-size: 1.875rem;
}
.bl_price_price span {
	font-size: 1rem;
}
.bl_price_body {
	padding: 15px;
}
.bl_price_body > *:last-child {
	margin-bottom: 0;
}
.bl_price_lead {
	margin-bottom: 20px;
}
.bl_price_features {
	text-align: center;
}
.bl_price_features > *:last-child {
	margin-bottom: 0;
}
.bl_price_features dt {
	padding: 5px;
	margin-bottom: 10px;
	background-color: #efefef;
}
.bl_price_features dd {
	margin-bottom: 20px;
}

/* === === === ヘルパーグループ === === === */

.hp_btGray {
	border-top: 1px solid #777 !important;
}

.hp_bgcBase {
	background-color: #efefef !important;
}